1. slotSchema (individual time slots)
This is separated because each slot has its own fields and logic:

startTime, endTime â€” define the time range.

isBooked â€” tracks if the slot is taken.

bookingId â€” optional reference to a Booking.

ðŸ‘‰ Separating this allows:

Validation for each field.

Cleaner code when managing bookings.

Easier to reuse slotSchema elsewhere if needed.

ðŸ”¹ 2. calendarEntrySchema (daily calendar)
Each day has:

A date.

An array of slots.

ðŸ‘‰ Separating it lets you:

Keep calendar logic modular.

Add custom methods or validations later (e.g., prevent duplicate dates).

Handle one day's slots independently.

ðŸ”¹ 3. stadiumSchema (main schema)
This is the top-level model that references all others. Keeping substructures separate:

Makes the schema more readable and easier to debug.

Follows Mongoose best practices for nested objects.

Allows the calendar field to be cleanly defined as an array of structured entries.

âœ… Benefits of this approach:
Maintainability: Easier to update or debug nested structures.

Validation: Ensures each nested part has strict and clear validation.

Modularity: You can add pre-save hooks, virtuals, or methods to sub-schemas if needed later.